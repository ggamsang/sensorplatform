{"version":3,"sources":["component/Map.jsx","view/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["containerStyle","width","height","center","lat","lng","Map","props","useState","markers","setMarkers","useEffect","marker","length","markerList","i","gps","split","gpsInfo","parseFloat","push","googleMapsApiKey","process","mapContainerStyle","zoom","map","e","position","Main","type","name","field","data","loading","setLoading","groupIdList","groupId","setGroupId","queryData","setQueryData","threeDaysAgo","Date","setDate","getDate","startDate","setStartDate","endDate","setEndDate","selectType","setSelectType","selectField","setSelectField","selectFieldType","setSelectFieldType","setField","chartLabel","setChartLabel","chartData","setChartData","tableData","setTableData","h_chartData","setHChartData","h_tableData","setHTableData","stepTableData","setStepTableData","getQueryData","q","size","query","bool","must","match","groupid","should","_index","_source","axios","get","headers","accept","params","JSON","stringify","index","source_conent_type","then","res","console","log","parse","body","status","hits","alert","catch","error","handleStartDateChange","date","handleEndDateChange","Array","isArray","arrayField","forEach","searchDataList","filter","date_q","replace","tableDataList","dataList","dateList","sort","a","b","tableD","bodytemp","temp","humi","h","h_date","isNaN","undefined","h_valueD1","value","h_valueD2","h_valueD3","h_dateD","labels","datasets","label","backgroundColor","borderColor","borderWidth","yAxisID","step","dist","sumStep","sumDist","s","s_date","s_valueD1","s_valueD2","s_dateD","startStepTime","stepTime","getTime","stepHour","parseInt","stepMin","stepSec","step_hour","step_min","step_sec","hi_bodytemp","hi_temp","hi_hba1c","hi_step","hi_dist","hi_co2","hi_co2_10","hi_hr","hi_humidity","hi_spo2","hi","hi_date","hi_dateD","hi_bodytemp_value","hi_temp_value","hi_humidity_value","hi_step_value","hi_dist_value","hi_co2_value","hi_hr_value","hi_hba1c_value","hi_spo2_value","humidity","distance","co2","hr","hba1c","spo2","j","valueD","createdtime","dateD","reverse","search","className","id","onChange","target","utils","DateFnsUtils","Grid","container","justifyContent","disableToolbar","variant","format","margin","KeyboardButtonProps","onClick","options","animation","duration","scales","y1","display","ticks","beginAtZero","y2","grid","drawOnChartArea","spanGaps","lineTension","yAxisId","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","App","StrictMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d7fd014.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\n\nconst containerStyle = {\n  width: \"1200px\",\n  height: \"400px\",\n};\n\nconst center = {\n  lat: 37.611896677263125,\n  lng: 126.99841166597041,\n};\nconst Map = (props) => {\n  const [markers, setMarkers] = useState([]);\n  useEffect(() => {\n    if (props.marker.length !== 0) {\n      var markerList = [];\n      for (var i = 0; i < props.marker.length; i++) {\n        const gps = props.marker[i].split(\",\");\n        // console.log(gps)\n        var gpsInfo = {\n          lat: parseFloat(gps[0]),\n          lng: parseFloat(gps[1]),\n        };\n        markerList.push(gpsInfo);\n      }\n      setMarkers(markerList);\n    }\n  }, [props]);\n\n  return (\n    <LoadScript googleMapsApiKey={process.env.REACT_APP_MAP_API_KEY}>\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={17}>\n        {markers.map((e, i) => {\n          return <Marker key={i} position={e} />;\n        })}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\n\nexport default Map;\n","/* eslint-disable no-unused-vars */\nimport \"date-fns\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { Line } from \"react-chartjs-2\";\nimport \"./Main.css\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport axios from \"axios\";\nimport Map from \"../component/Map\";\nconst WEEK = 7;\n\n// [TODO]\nconst Main = () => {\n  // 검색 및 분류를 위한 데이터 셋\n  const [data, setData] = useState([\n    {\n      type: \"oximetry\",\n      name: \"oximetry\",\n      field: [\n        {\n          type: [\"hba1c\", \"date\"],\n          name: \"HbA1c(당화혈색소)\",\n        },\n        {\n          type: [\"hr\", \"date\"],\n          name: \"Heart rate(심박수)\",\n        },\n        {\n          type: [\"spo2\", \"date\"],\n          name: \"SpO2(산소포화도)\",\n        },\n      ],\n    },\n    {\n      type: \"humidity\",\n      name: \"human activity\",\n      field: [\n        {\n          type: [\"bodytemperature\", \"temperature\", \"humidity\", \"date\"],\n          name: \"체온, 온도, 습도\",\n        },\n        {\n          type: [\"step\", \"distance\", \"date\"],\n          name: \"걸음 수, 이동거리\",\n        },\n        {\n          type: [\"gps\", \"date\"],\n          name: \"gps\",\n        },\n        {\n          type: [\"co2\", \"date\"],\n          name: \"CO2\",\n        },\n      ],\n    },\n    {\n      type: \"gasdetect\",\n      name: \"gasdetect\",\n      field: [\n        {\n          type: [\"co\", \"date\"],\n          name: \"co\",\n        },\n        {\n          type: [\"no2\", \"date\"],\n          name: \"no2\",\n        },\n        {\n          type: [\"c2h5oh\", \"date\"],\n          name: \"c2h5oh\",\n        },\n        {\n          type: [\"h2\", \"date\"],\n          name: \"h2\",\n        },\n        {\n          type: [\"nh3\", \"date\"],\n          name: \"nh3\",\n        },\n        {\n          type: [\"ch4\", \"date\"],\n          name: \"ch4\",\n        },\n        {\n          type: [\"c3h8\", \"date\"],\n          name: \"c3h8\",\n        },\n        {\n          type: [\"c4h10\", \"date\"],\n          name: \"c4h10\",\n        },\n        {\n          type: [\"temperature\", \"date\"],\n          name: \"temperature\",\n        },\n        {\n          type: [\"humidity\", \"date\"],\n          name: \"humidity\",\n        },\n        {\n          type: [\"barometer\", \"date\"],\n          name: \"barometer\",\n        },\n        {\n          type: [\"humandetecting\", \"date\"],\n          name: \"주변사람수\",\n        },\n        {\n          type: [\"gps\", \"date\"],\n          name: \"gps\",\n        },\n      ],\n    },\n    {\n      type: \"human information\",\n      name: \"human information\",\n      field: [\n        {\n          type: [\"all\", \"all\"],\n          name: \"all\",\n        },\n      ],\n    },\n  ]);\n\n  // loading\n  const [loading, setLoading] = useState(false);\n\n  //그룹아이디 검색을 위한 데이터 셋\n  const [groupIdList, setGroupIdList] = useState([1, 2, 3, 4, 5]);\n  //그룹아이디 현재 검색 상태\n  const [groupId, setGroupId] = useState(1);\n  //쿼리데이터 현재 검색 상태\n  const [queryData, setQueryData] = useState([]);\n\n  //날짜 검색 7일 간 default 검색을 위한 셋\n  var threeDaysAgo = new Date();\n  threeDaysAgo.setDate(threeDaysAgo.getDate() - WEEK);\n  const [startDate, setStartDate] = useState(threeDaysAgo);\n  const [endDate, setEndDate] = useState(new Date());\n\n  //data type 선택을 위한 셋\n  const [selectType, setSelectType] = useState(\"oximetry\");\n  //data field 선택을 위한 셋\n  const [selectField, setSelectField] = useState([\"hba1c\", \"date\"]);\n  const [selectFieldType, setSelectFieldType] = useState([\"hba1c\", \"date\"]);\n  //data field set\n  const [field, setField] = useState([]);\n  //차트 데이터와 라벨 설정을 위한 셋\n  const [chartLabel, setChartLabel] = useState([]);\n  const [chartData, setChartData] = useState([]);\n  //테이블 데이터와 라벨 설정을 위한 셋\n  const [tableData, setTableData] = useState([]);\n\n  const [h_chartData, setHChartData] = useState({});\n  const [h_tableData, setHTableData] = useState([]);\n  const [stepTableData, setStepTableData] = useState([]);\n\n  //쿼리데이터 설정\n  const getQueryData = async () => {\n    setLoading(true);\n\n    setQueryData([]);\n    var q = {};\n    // Human information 검색시 쿼리데이터\n    if (selectType === \"human information\") {\n      q = {\n        size: 1000,\n        query: {\n          bool: {\n            must: [\n              { match: { groupid: groupId } },\n              {\n                bool: {\n                  should: [\n                    { match: { _index: \"oximetry\" } },\n                    { match: { _index: \"humidity\" } },\n                  ],\n                },\n              },\n            ],\n          },\n        },\n      };\n    }\n    // Human information 제외 다른 필드 검색시 쿼리데이터\n    else {\n      q = {\n        size: 1000,\n        _source: selectFieldType,\n        query: {\n          bool: {\n            must: [\n              { match: { _index: selectType } },\n              { match: { groupid: groupId } },\n            ],\n          },\n        },\n      };\n    }\n    // console.log(selectType);\n    // return;\n    await axios\n      .get(\n        \"https://3d2jb7xavd.execute-api.ap-northeast-2.amazonaws.com/new/proxyLambda\",\n        {\n          headers: { accept: \"application/json\" },\n          params: {\n            query: JSON.stringify(q),\n            index: selectType,\n            source_conent_type: \"application/json\",\n            // auth: JSON.stringify({\n            //   id: process.env.REACT_APP_OPENSEARCH_ID,\n            //   pw: process.env.REACT_APP_OPENSEARCH_PW,\n            // }),\n          },\n        }\n      )\n      .then(function (res) {\n        console.log(res);\n        const data = JSON.parse(res.data.body);\n        console.log(data);\n        if (data.status === 404) {\n          alert(\"해당 인덱스를 찾을 수 없습니다 : \" + selectType);\n          return;\n        }\n        console.log(data[\"hits\"]);\n\n        // return;\n        const hits = JSON.parse(res.data.body).hits;\n        if (hits.hits.length === 0) {\n          alert(\"검색조건에 맞는 데이터가 존재하지 않습니다.\");\n        } else {\n          setQueryData(hits.hits);\n        }\n      })\n      .catch(function (error) {\n        alert(\"데이터를 가져오지 못하였습니다. \" + error);\n        setQueryData([]);\n      });\n    setLoading(false);\n  };\n\n  //date 설정을 위한 함수\n  const handleStartDateChange = (date) => {\n    setStartDate(date);\n  };\n  const handleEndDateChange = (date) => {\n    setEndDate(date);\n  };\n\n  //select type이 바뀔 때 그에 맞는 field 리스트를 바꾸는 함수\n  useEffect(() => {\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].type === selectType) {\n        setField(data[i].field);\n        setSelectField(data[i].field[0].type);\n        setSelectFieldType(data[i].field[0].type);\n      }\n    }\n  }, [selectType, data]);\n\n  //field 변경에 따른 쿼리 데이터 검색을 위한 추가\n  useEffect(() => {\n    if (!Array.isArray(selectField)) {\n      var arrayField = [];\n      var splitField = selectField.split(\",\");\n      splitField.forEach((e) => {\n        arrayField.push(e);\n      });\n      setSelectFieldType(arrayField);\n    }\n  }, [selectField]);\n\n  // 검색 함수\n  const search = () => {\n    let searchDataList = queryData.filter((q) => {\n      const date_q = new Date(q._source?.date?.replace(\" \", \"T\"));\n      if (date_q) {\n        if (date_q >= startDate && date_q <= endDate) {\n          return true;\n        }\n      }\n      return false;\n    });\n    console.log(\"---:\", { searchDataList });\n    let tableDataList = [];\n    let dataList = [];\n    let dateList = [];\n\n    //검색 데이터가 존재하지 않을 시\n    if (searchDataList.length === 0) {\n      //상태 초기화\n      setChartLabel([]);\n      setChartData([]);\n      setTableData([]);\n      setHChartData([]);\n      setHTableData([]);\n\n      alert(\"검색된 데이터가 존재하지 않습니다.\");\n      return;\n    }\n\n    // 데이터를 시간 순으로 정렬하기\n    searchDataList.sort(function (a, b) {\n      return (\n        new Date(a._source.date.replace(\" \", \"T\")) -\n        new Date(b._source.date.replace(\" \", \"T\"))\n      );\n    });\n\n    // 상태 초기화\n    setChartLabel([]);\n    setChartData([]);\n    setTableData([]);\n    setHChartData([]);\n    setHTableData([]);\n\n    tableDataList = [];\n    dataList = [];\n    dateList = [];\n\n    // human information || bodytemperature || step 을 검색 할 시\n    if (\n      selectType === \"human information\" ||\n      (selectType === \"humidity\" && selectFieldType[0] === \"bodytemperature\") ||\n      (selectType === \"humidity\" && selectFieldType[0] === \"step\")\n    ) {\n      var tableD = [];\n      // body temperature 검색 시 (human activity > 체온 온도 습도)\n      if (selectFieldType[0] === \"bodytemperature\") {\n        var bodytemp = [];\n        var temp = [];\n        var humi = [];\n        for (var h = 0; h < searchDataList.length; h++) {\n          var h_date = new Date(\n            searchDataList[h]._source.date.replace(\" \", \"T\")\n          );\n          if (!isNaN(h_date)) {\n            if (searchDataList[h]._source === undefined) continue;\n            else {\n              var h_valueD1 = parseFloat(\n                searchDataList[h]._source[\"bodytemperature\"].value\n              );\n              var h_valueD2 = parseFloat(\n                searchDataList[h]._source[\"temperature\"].value\n              );\n              var h_valueD3 = parseFloat(\n                searchDataList[h]._source[\"humidity\"].value\n              );\n              var h_dateD = searchDataList[h]._source.date;\n              bodytemp.push(h_valueD1);\n              temp.push(h_valueD2);\n              humi.push(h_valueD3);\n              dateList.push(h_dateD);\n              tableD.push({\n                date: h_dateD,\n                bodytemp: h_valueD1,\n                temp: h_valueD2,\n                humi: h_valueD3,\n              });\n            }\n          }\n        }\n        setHChartData({\n          labels: dateList,\n          datasets: [\n            {\n              label: \"bodytemperature\",\n              data: bodytemp,\n              backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              borderColor: \"rgb(255, 99, 132)\",\n              borderWidth: 3,\n              yAxisID: \"y1\",\n            },\n            {\n              label: \"temperature\",\n              data: temp,\n              backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n              borderColor: \"rgb(54, 162, 235)\",\n              borderWidth: 3,\n              yAxisID: \"y1\",\n            },\n            {\n              label: \"humidity\",\n              data: humi,\n              backgroundColor: \"rgba(201, 203, 207, 0.2)\",\n              borderColor: \"rgb(201, 203, 207)\",\n              borderWidth: 3,\n              yAxisID: \"y2\",\n            },\n          ],\n        });\n      }\n      // step 검색 시 (human activity > 걸음수 이동거리)\n      else if (selectFieldType[0] === \"step\") {\n        var step = [];\n        var dist = [];\n        var sumStep = 0;\n        var sumDist = 0;\n        for (var s = 0; s < searchDataList.length; s++) {\n          var s_date = new Date(\n            searchDataList[s]._source.date.replace(\" \", \"T\")\n          );\n          if (!isNaN(s_date)) {\n            if (searchDataList[s]._source === undefined) continue;\n            else {\n              var s_valueD1 = parseFloat(\n                searchDataList[s]._source[\"step\"].value\n              );\n              var s_valueD2 = parseFloat(\n                searchDataList[s]._source[\"distance\"].value\n              );\n              var s_dateD = searchDataList[s]._source.date;\n              sumStep += s_valueD1;\n              sumDist += s_valueD2;\n              step.push(s_valueD1);\n              dist.push(s_valueD2);\n              dateList.push(s_dateD);\n              tableD.push({\n                date: s_dateD,\n                step: s_valueD1,\n                dist: s_valueD2,\n              });\n            }\n          }\n        }\n        var startStepTime = new Date(tableD[0].date);\n        var endStepTime = new Date(tableD[tableD.length - 1].date);\n        var stepTime = endStepTime.getTime() - startStepTime.getTime();\n        var stepHour = parseInt(stepTime / 1000 / 60 / 60);\n        var stepMin = parseInt(\n          (stepTime - stepHour * 1000 * 60 * 60) / 1000 / 60\n        );\n        var stepSec = parseInt(\n          (stepTime - stepHour * 1000 * 60 * 60 - stepMin * 1000 * 60) / 1000\n        );\n\n        setStepTableData({\n          step_hour: stepHour,\n          step_min: stepMin,\n          step_sec: stepSec,\n          sumStep,\n          sumDist,\n        });\n        setHChartData({\n          labels: dateList,\n          datasets: [\n            {\n              label: \"step\",\n              data: step,\n              backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              borderColor: \"rgb(255, 99, 132)\",\n              borderWidth: 3,\n              yAxisID: \"y1\",\n            },\n            {\n              label: \"distance\",\n              data: dist,\n              backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n              borderColor: \"rgb(54, 162, 235)\",\n              borderWidth: 3,\n              yAxisID: \"y2\",\n            },\n          ],\n        });\n      }\n      //human information 검색시\n      else if (selectType === \"human information\") {\n        var hi_bodytemp = [];\n        var hi_temp = [];\n        var hi_hba1c = [];\n        var hi_step = [];\n        var hi_dist = [];\n        var hi_co2 = [];\n        var hi_co2_10 = [];\n        var hi_hr = [];\n        var hi_humidity = [];\n        var hi_spo2 = [];\n        for (var hi = 0; hi < searchDataList.length; hi++) {\n          var hi_date = new Date(\n            searchDataList[hi]._source.date.replace(\" \", \"T\")\n          );\n          if (!isNaN(hi_date)) {\n            if (searchDataList[hi]._source === undefined) continue;\n            else {\n              var hi_dateD = searchDataList[hi]._source.date;\n              dateList.push(hi_dateD);\n\n              var hi_bodytemp_value = null;\n              var hi_temp_value = null;\n              var hi_humidity_value = null;\n              var hi_step_value = null;\n              var hi_dist_value = null;\n              var hi_co2_value = null;\n              var hi_hr_value = null;\n              var hi_hba1c_value = null;\n              var hi_spo2_value = null;\n              if (searchDataList[hi]._index === \"oximetry\") {\n                hi_hr_value = parseFloat(\n                  searchDataList[hi]._source[\"hr\"]\n                    ? searchDataList[hi]._source[\"hr\"].value\n                    : 0\n                );\n                hi_hba1c_value = parseFloat(\n                  searchDataList[hi]._source[\"hba1c\"].value\n                );\n                hi_spo2_value = parseFloat(\n                  searchDataList[hi]._source[\"spo2\"].value\n                );\n              }\n              if (searchDataList[hi]._index === \"humidity\") {\n                hi_bodytemp_value = parseFloat(\n                  searchDataList[hi]._source[\"bodytemperature\"].value\n                );\n                hi_temp_value = parseFloat(\n                  searchDataList[hi]._source[\"temperature\"].value\n                );\n                hi_humidity_value = parseFloat(\n                  searchDataList[hi]._source[\"humidity\"].value\n                );\n                hi_step_value = parseFloat(\n                  searchDataList[hi]._source[\"step\"].value\n                );\n                hi_dist_value = parseFloat(\n                  searchDataList[hi]._source[\"distance\"].value\n                );\n                hi_co2_value = parseFloat(\n                  searchDataList[hi]._source[\"co2\"].value\n                );\n              }\n              hi_hr.push(hi_hr_value);\n              hi_hba1c.push(hi_hba1c_value);\n              hi_spo2.push(hi_spo2_value);\n              hi_bodytemp.push(hi_bodytemp_value);\n              hi_temp.push(hi_temp_value);\n              hi_humidity.push(hi_humidity_value);\n              hi_step.push(hi_step_value);\n              hi_dist.push(hi_dist_value);\n              hi_co2.push(hi_co2_value);\n              hi_co2_10.push(hi_co2_value ? hi_co2_value / 10 : null);\n              tableD.push({\n                date: hi_dateD,\n                bodytemp: hi_bodytemp_value,\n                temp: hi_temp_value,\n                humidity: hi_humidity_value,\n                step: hi_step_value,\n                distance: hi_dist_value,\n                co2: hi_co2_value,\n                hr: hi_hr_value,\n                hba1c: hi_hba1c_value,\n                spo2: hi_spo2_value,\n              });\n            }\n          }\n        }\n        setHChartData({\n          labels: dateList,\n          datasets: [\n            {\n              label: \"bodytemperature\",\n              data: hi_bodytemp,\n              backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              borderColor: \"rgb(255, 99, 132)\",\n              borderWidth: 3,\n              yAxisID: \"y1\",\n            },\n            {\n              label: \"temperature\",\n              data: hi_temp,\n              backgroundColor: \"rgba(55, 160, 192, 0.2)\",\n              borderColor: \"rgb(55, 160, 192)\",\n              borderWidth: 3,\n              yAxisID: \"y1\",\n            },\n            {\n              label: \"hba1c\",\n              data: hi_hba1c,\n              backgroundColor: \"rgba(255, 205, 86, 0.2)\",\n              borderColor: \"rgb(255, 205, 86)\",\n              borderWidth: 3,\n              yAxisID: \"y1\",\n            },\n            {\n              label: \"step\",\n              data: hi_step,\n              backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n              borderColor: \"rgb(54, 162, 235)\",\n              borderWidth: 3,\n              yAxisID: \"y2\",\n            },\n            {\n              label: \"distance\",\n              data: hi_dist,\n              backgroundColor: \"rgba(153, 102, 255, 0.2)\",\n              borderColor: \"rgb(153, 102, 255)\",\n              borderWidth: 3,\n              yAxisID: \"y2\",\n            },\n            {\n              label: \"co2\",\n              data: hi_co2_10,\n              backgroundColor: \"rgba(201, 203, 207, 0.2)\",\n              borderColor: \"rgb(201, 203, 207)\",\n              borderWidth: 3,\n              yAxisID: \"y2\",\n            },\n            {\n              label: \"heart_rate\",\n              data: hi_hr,\n              backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n              borderColor: \"rgb(75, 192, 192)\",\n              borderWidth: 3,\n              yAxisID: \"y2\",\n            },\n            {\n              label: \"humidity\",\n              data: hi_humidity,\n              backgroundColor: \"rgba(255, 159, 64, 0.2)\",\n              borderColor: \"rgb(255, 159, 64)\",\n              borderWidth: 3,\n              yAxisID: \"y2\",\n            },\n            {\n              label: \"spO2\",\n              data: hi_spo2,\n              backgroundColor: \"rgba(0, 0, 0, 0.2)\",\n              borderColor: \"rgb(128, 128, 128)\",\n              borderWidth: 3,\n              yAxisID: \"y2\",\n            },\n          ],\n        });\n      }\n      setHTableData(tableD);\n    }\n    //위의 세 경우를 제외하고 나머지 검색 시\n    else {\n      for (var j = 0; j < searchDataList.length; j++) {\n        var date = new Date(searchDataList[j]._source.date.replace(\" \", \"T\"));\n        if (!isNaN(date)) {\n          if (searchDataList[j]._source[selectFieldType[0]] === undefined)\n            continue;\n          else {\n            var valueD = 0;\n            if (selectFieldType[0] === \"gps\") {\n              valueD = searchDataList[j]._source[selectFieldType[0]];\n            } else\n              valueD = parseFloat(\n                searchDataList[j]._source[selectFieldType[0]].value\n              );\n            console.log(\n              searchDataList[j]._source[selectFieldType[0]].createdtime\n            );\n            var dateD =\n              searchDataList[j]._source[selectFieldType[0]].createdtime;\n            // var dateD = searchDataList[j]._source.date;\n            dataList.push(valueD);\n            dateList.push(dateD);\n            tableDataList.push({\n              date: dateD,\n              value: valueD,\n            });\n          }\n        }\n        setTableData(tableDataList.reverse());\n        setChartData(dataList.reverse());\n        setChartLabel(dateList);\n      }\n    }\n  };\n\n  //쿼리데이터가 비지 않았을 때만 서치 함수 실행\n  useEffect(() => {\n    if (queryData.length !== 0) search();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [queryData]);\n\n  return (\n    <div className=\"main\">\n      {loading ? \"Loading\" : null}\n      {/* 검색을 위한 옵션 설정 칸 */}\n      <div className=\"main-options\">\n        <div className=\"main-options-type\">\n          {/* group id 옵션 */}\n          <div className=\"main-options-title\">Group Id</div>\n          <div className=\"main-options-select\">\n            <select\n              name=\"group-id\"\n              id=\"group-id\"\n              onChange={(e) => setGroupId(e.target.value)}\n            >\n              {groupIdList.map((e, i) => (\n                <option value={e} key={i}>\n                  {e}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        <div className=\"main-options-type\">\n          {/* data type 옵션 */}\n          <div className=\"main-options-title\">Data Type</div>\n          <div className=\"main-options-select\">\n            <select\n              name=\"data-type\"\n              id=\"data-type\"\n              onChange={(e) => {\n                setSelectType(e.target.value);\n                setChartData([]);\n                setTableData([]);\n              }}\n            >\n              {data.map((e, i) => (\n                <option value={e.type} key={i}>\n                  {e.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        <div className=\"main-options-field\">\n          {/* data field 옵션 */}\n          <div className=\"main-options-title\">Data Field</div>\n          <div className=\"main-options-select\">\n            <select\n              name=\"data-field\"\n              id=\"data-field\"\n              onChange={(e) => {\n                setSelectField(e.target.value);\n                setChartData([]);\n                setTableData([]);\n              }}\n            >\n              {field.map((e, i) => (\n                <option value={e.type} key={i}>\n                  {e.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        <div className=\"main-options-datepicker\">\n          {/* 검색 시간 범위 설정 */}\n          <div className=\"main-options-title\">Created Time</div>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justifyContent=\"space-between\">\n              <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"yyyy-MM-dd\"\n                margin=\"normal\"\n                id=\"date-picker-start\"\n                label=\"Start Date\"\n                value={startDate}\n                onChange={handleStartDateChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change date\",\n                }}\n              />\n              <KeyboardTimePicker\n                margin=\"normal\"\n                id=\"time-picker-start\"\n                label=\"Start Time\"\n                value={startDate}\n                onChange={handleStartDateChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change time\",\n                }}\n              />\n            </Grid>\n            <Grid container justifyContent=\"space-between\">\n              <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"yyyy-MM-dd\"\n                margin=\"normal\"\n                id=\"date-picker-end\"\n                label=\"End Date\"\n                value={endDate}\n                onChange={handleEndDateChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change date\",\n                }}\n              />\n              <KeyboardTimePicker\n                margin=\"normal\"\n                id=\"time-picker-end\"\n                label=\"End Time\"\n                value={endDate}\n                onChange={handleEndDateChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change time\",\n                }}\n              />\n            </Grid>\n          </MuiPickersUtilsProvider>\n        </div>\n      </div>\n      {/* 검색 버튼 */}\n      <div className=\"main-search\">\n        <button onClick={() => getQueryData()}>Search</button>\n      </div>\n      {/* 결과 그래프 화면 */}\n      <div className=\"main-graph\">\n        <div className=\"main-graph-title\">Graph</div>\n        {\n          // human information, 체온온도습도, 걸음수이동거리는 다중 그래프\n          selectType === \"human information\" ||\n          (selectType === \"humidity\" &&\n            selectFieldType[0] === \"bodytemperature\") ||\n          (selectType === \"humidity\" && selectFieldType[0] === \"step\") ? (\n            <Line\n              data={h_chartData}\n              options={{\n                animation: {\n                  duration: 0,\n                },\n                scales: {\n                  y1: {\n                    type: \"linear\",\n                    display: true,\n                    position: \"left\",\n                    ticks: {\n                      beginAtZero: true,\n                    },\n                  },\n                  y2: {\n                    type: \"linear\",\n                    display: true,\n                    position: \"right\",\n                    ticks: {\n                      beginAtZero: true,\n                    },\n                    grid: {\n                      drawOnChartArea: false,\n                    },\n                  },\n                },\n                spanGaps: true,\n              }}\n            />\n          ) : // gps 경우 그래프 대신 맵을 보여줌\n          selectFieldType[0] === \"gps\" ? (\n            <Map marker={chartData} />\n          ) : (\n            // 위의 예외 경우를 제외한 다른 검색 경우는 그래프 하나를 보여줌\n            <Line\n              data={{\n                labels: chartLabel ? chartLabel : null,\n                datasets: [\n                  {\n                    label: \"value\",\n                    data: chartData,\n                    lineTension: 0,\n                    backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n                    borderColor: \"rgb(255, 99, 132)\",\n                    borderWidth: 3,\n                    yAxisId: \"y1\",\n                  },\n                ],\n              }}\n              options={{\n                animation: {\n                  duration: 0,\n                },\n                spanGaps: true,\n              }}\n            />\n          )\n        }\n      </div>\n      {/* 결과 테이블 화면 */}\n      <div className=\"main-table\">\n        <div className=\"main-graph-title\">Table</div>\n        {\n          // human information, 체온온도습도, 걸음수이동거리는 다중 테이블\n          (selectType === \"humidity\" &&\n            selectFieldType[0] === \"bodytemperature\") ||\n          (selectType === \"humidity\" && selectFieldType[0] === \"step\") ? (\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  {selectFieldType[0] === \"bodytemperature\" ? (\n                    <TableRow>\n                      <TableCell>날짜</TableCell>\n                      <TableCell>체온</TableCell>\n                      <TableCell>온도</TableCell>\n                      <TableCell>습도</TableCell>\n                    </TableRow>\n                  ) : (\n                    <TableRow>\n                      <TableCell>날짜</TableCell>\n                      <TableCell>걸음 수</TableCell>\n                      <TableCell>이동 거리</TableCell>\n                    </TableRow>\n                  )}\n                </TableHead>\n                <TableBody>\n                  {selectFieldType[0] === \"bodytemperature\"\n                    ? h_tableData.map((e, i) => (\n                        <TableRow key={i}>\n                          <TableCell>{e.date}</TableCell>\n                          <TableCell>{e.bodytemp}</TableCell>\n                          <TableCell>{e.temp}</TableCell>\n                          <TableCell>{e.humi}</TableCell>\n                        </TableRow>\n                      ))\n                    : h_tableData.map((e, i) => (\n                        <TableRow key={i}>\n                          <TableCell>{e.date}</TableCell>\n                          <TableCell>{e.step}</TableCell>\n                          <TableCell>{e.dist}</TableCell>\n                        </TableRow>\n                      ))}\n                  {selectFieldType[0] === \"step\" ? (\n                    <TableRow>\n                      <TableCell>\n                        총 {stepTableData.step_hour}시간{\" \"}\n                        {stepTableData.step_min}분 {stepTableData.step_sec}초\n                      </TableCell>\n                      <TableCell>{stepTableData.sumStep} 걸음</TableCell>\n                      <TableCell>{stepTableData.sumDist} m</TableCell>\n                    </TableRow>\n                  ) : null}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          ) : selectType === \"human information\" ? (\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>날짜</TableCell>\n                    <TableCell>체온</TableCell>\n                    <TableCell>온도</TableCell>\n                    <TableCell>습도</TableCell>\n                    <TableCell>걸음 수</TableCell>\n                    <TableCell>이동 거리</TableCell>\n                    <TableCell>CO2</TableCell>\n                    <TableCell>당화혈색소</TableCell>\n                    <TableCell>심박</TableCell>\n                    <TableCell>산소포화도</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {h_tableData.length > 0 &&\n                    h_tableData.map((e, i) => (\n                      <TableRow key={i}>\n                        <TableCell>{e.date}</TableCell>\n                        <TableCell>{e.bodytemp}</TableCell>\n                        <TableCell>{e.temp}</TableCell>\n                        <TableCell>{e.humidity}</TableCell>\n                        <TableCell>{e.step}</TableCell>\n                        <TableCell>{e.distance}</TableCell>\n                        <TableCell>{e.co2}</TableCell>\n                        <TableCell>{e.hba1c}</TableCell>\n                        <TableCell>{e.hr}</TableCell>\n                        <TableCell>{e.spo2}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          ) : (\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>날짜</TableCell>\n\n                    {selectFieldType[0] === \"hba1c\" ? (\n                      <TableCell>당화혈색소</TableCell>\n                    ) : selectFieldType[0] === \"hr\" ? (\n                      <TableCell>심박</TableCell>\n                    ) : selectFieldType[0] === \"spo2\" ? (\n                      <TableCell>산소포화도</TableCell>\n                    ) : selectFieldType[0] === \"gps\" ? (\n                      <TableCell>GPS</TableCell>\n                    ) : selectFieldType[0] === \"co2\" ? (\n                      <TableCell>이산화탄소</TableCell>\n                    ) : selectFieldType[0] === \"co\" ? (\n                      <TableCell>일산화탄소</TableCell>\n                    ) : selectFieldType[0] === \"no2\" ? (\n                      <TableCell>이산화질소</TableCell>\n                    ) : selectFieldType[0] === \"c2h5oh\" ? (\n                      <TableCell>에탄올</TableCell>\n                    ) : selectFieldType[0] === \"h2\" ? (\n                      <TableCell>수소</TableCell>\n                    ) : selectFieldType[0] === \"nh3\" ? (\n                      <TableCell>암모니아</TableCell>\n                    ) : selectFieldType[0] === \"ch4\" ? (\n                      <TableCell>메탄</TableCell>\n                    ) : selectFieldType[0] === \"c3h8\" ? (\n                      <TableCell>프로판</TableCell>\n                    ) : selectFieldType[0] === \"c4h10\" ? (\n                      <TableCell>이소부탄</TableCell>\n                    ) : selectFieldType[0] === \"temperature\" ? (\n                      <TableCell>온도</TableCell>\n                    ) : selectFieldType[0] === \"humidity\" ? (\n                      <TableCell>습도</TableCell>\n                    ) : selectFieldType[0] === \"barometer\" ? (\n                      <TableCell>기압</TableCell>\n                    ) : (\n                      <TableCell>주변인 인식</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {tableData.length > 0 &&\n                    tableData.map((e, i) => (\n                      <TableRow key={i}>\n                        <TableCell>{e.date}</TableCell>\n                        <TableCell>{e.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import \"./App.css\";\nimport React from \"react\";\nimport Main from \"./view/Main\"\n\nfunction App() {\n  return (\n    <React.StrictMode>\n      <Main />\n    </React.StrictMode>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import dotenv from \"dotenv\";\n\nrequire('dotenv').config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}